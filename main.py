from typing import Listfrom fastapi import FastAPI, Dependsfrom fastapi import Responsefrom sqlalchemy.orm import Sessionfrom cruds.subjects import subject_create, subject_update, subjects_get_all, subject_deletefrom cruds.topics import topic_create, topic_get, topic_update, topic_delete, get_all_topicsfrom database import get_dbfrom schemas.subject import SubjectSchema, UpdateSubjectfrom schemas.topic import TopicSchema, CreateTopic, UpdateTopicapp = FastAPI()# # # # # ## SUBJECT# # # # # #@app.post("/create-subject", response_model=SubjectSchema, tags=["subject"])async def create_subjects(name: str, db: Session = Depends(get_db)):    subject = subject_create(db, subject_name=name)    return subject@app.put("/update-subject/{pk}", tags=["subject"])async def update_subject(pk: int, subject: UpdateSubject, db: Session = Depends(get_db)):    subject = subject_update(db, pk, subject.dict(exclude_unset=True))    return subject@app.get("/get-subjects", tags=["subject"])async def get_subjects(db: Session = Depends(get_db)):    subjects = subjects_get_all(db)    response = []    for subject in subjects:        response.append(            {"name": subject.name, "id": subject.id, "topics": [topic.id for topic in subject.topics]})    return response@app.get("/get-subjects-with-topics", tags=["subject"])async def get_subjects_with_topics(db: Session = Depends(get_db)):    subjects = subjects_get_all(db)    return subjects@app.delete("/del-subject/{sub_id}", tags=["subject"])async def del_subject(sub_id, db: Session = Depends(get_db)):    subject_delete(db, sub_id)    return Response(status_code=204)# # # # # ## TOPIC# # # # # #@app.post("/create-topic", response_model=TopicSchema, tags=["topic"])async def create_topic(topic: CreateTopic, db: Session = Depends(get_db)):    topic = topic_create(db, topic.dict())    return topic@app.get('/get-topic/{pk}', response_model=TopicSchema, tags=["topic"])async def get_topic(pk, db: Session = Depends(get_db)):    topic = topic_get(db, pk)    return topic@app.get('/get-topics/', response_model=List[TopicSchema], tags=["topic"])async def get_topics(db: Session = Depends(get_db)):    topics = get_all_topics(db)    return topics@app.put('/update-topic/{pk}', response_model=TopicSchema, tags=["topic"])async def update_topic(pk, topic: UpdateTopic, db: Session = Depends(get_db)):    topic = topic_update(db, pk, topic.dict(exclude_unset=True))    return topic@app.delete('/delete-topic/{pk}', tags=["topic"])async def delete_topic(pk, db: Session = Depends(get_db)):    topic_delete(db, pk)    return Response(status_code=204)