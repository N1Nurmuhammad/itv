from fastapi import HTTPExceptionfrom sqlalchemy.orm import Sessionfrom cruds.topics import topic_getfrom models import Subjectsdef subjects_get_all(db: Session):    subjects = db.query(Subjects).all()    return subjectsdef subject_create(db: Session, subject_name):    subject = Subjects(name=subject_name)    db.add(subject)    db.commit()    db.refresh(subject)    return subjectdef subject_update(db: Session, sub_id, data):    subject_query = db.query(Subjects).filter(Subjects.id == sub_id)    subject: Subjects = subject_query.first()    if not subject:        raise HTTPException(status_code=404)    subject_query.filter(Subjects.id == sub_id).update({"name": data["name"]},                                                       synchronize_session=False)    if [topic.id for topic in subject.topics] != data["topics"]:        list_topic = []        for pk in data["topics"]:            try:                list_topic.append(topic_get(db, pk))            except:                pass        subject.topics = list_topic    db.commit()    db.refresh(subject)    return subjectdef subject_delete(db: Session, sub_id):    subject_query = db.query(Subjects).filter(Subjects.id == sub_id)    subject = subject_query.first()    if not subject:        raise HTTPException(status_code=404)    subject_query.delete(synchronize_session=False                         )    db.commit()